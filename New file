#imports
from chatterbot import ChatBot
from chatterbot.trainers import ChatterBotCorpusTrainer
from tkinter import *
from tkinter import Menu
import pyttsx3 as pp
import speech_recognition as s
import threading
import parser
from math import factorial
i=0
import random
import requests
import wikipedia
import datetime
from datetime import date
from bs4 import BeautifulSoup

def calculator():
    root = Tk()
    root.title("Calculator")
    root.geometry("370x270")

    def get_variables(num):
        global i
        display.insert(i, num)
        i += 1

    def get_operation(operator):
        global i
        length = len(operator)
        display.insert(i, operator)
        i += length

    def clear_all():
        display.delete(0, END)

    def undo():
        entire_string = display.get()
        if len(entire_string):
            new_string = entire_string[:-1]
            clear_all()
            display.insert(0, new_string)
        else:
            clear_all()
            display.insert(0, "Error")

    def calculate():
        entire_string = display.get()
        try:
            a = parser.expr(entire_string).compile()
            result = eval(a)
            clear_all()
            display.insert(0, result)
        except Exception:
            clear_all()
            display.insert(0, "Error")

    def fact():
        entire_string = display.get()
        try:
            result = factorial(int(entire_string))
            clear_all()
            display.insert(0, result)
        except Exception:
            clear_all()
            display.insert(0, "Error")

    # adding the input field

    display = Entry(root, width=50, justify="right", bd=0)
    display.grid(row=1, columnspan=6, sticky=N + E + W + S)
    # Code to add buttons to the Calculator
    Button(root, text="1", command=lambda: get_variables(1), height=2, width=7).grid(row=2, column=0,
                                                                                     sticky=N + S + E + W)
    Button(root, text=" 2", command=lambda: get_variables(2), height=2, width=7).grid(row=2, column=1,
                                                                                      sticky=N + S + E + W)
    Button(root, text=" 3", command=lambda: get_variables(3), height=2, width=7).grid(row=2, column=2,
                                                                                      sticky=N + S + E + W)

    Button(root, text="4", command=lambda: get_variables(4), height=2, width=7).grid(row=3, column=0,
                                                                                     sticky=N + S + E + W)
    Button(root, text=" 5", command=lambda: get_variables(5), height=2, width=7).grid(row=3, column=1,
                                                                                      sticky=N + S + E + W)
    Button(root, text=" 6", command=lambda: get_variables(6), height=2, width=7).grid(row=3, column=2,
                                                                                      sticky=N + S + E + W)

    Button(root, text="7", command=lambda: get_variables(7), height=2, width=7).grid(row=4, column=0,
                                                                                     sticky=N + S + E + W)
    Button(root, text=" 8", command=lambda: get_variables(8), height=2, width=7).grid(row=4, column=1,
                                                                                      sticky=N + S + E + W)
    Button(root, text=" 9", command=lambda: get_variables(9), height=2, width=7).grid(row=4, column=2,
                                                                                      sticky=N + S + E + W)

    # adding other buttons to the calculator
    Button(root, text="AC", command=lambda: clear_all(), height=2, width=7).grid(row=5, column=0, sticky=N + S + E + W)
    Button(root, text=" 0", command=lambda: get_variables(0), height=2, width=7).grid(row=5, column=1,    sticky=N + S + E + W)
    Button(root, text=" .", command=lambda: get_variables("."), height=2, width=7).grid(row=5, column=2,
                                                                                        sticky=N + S + E + W)

    Button(root, text="+", command=lambda: get_operation("+"), height=2, width=7).grid(row=2, column=3,
                                                                                       sticky=N + S + E + W)
    Button(root, text="-", command=lambda: get_operation("-"), height=2, width=7).grid(row=3, column=3,
                                                                                       sticky=N + S + E + W)
    Button(root, text="", command=lambda: get_operation(""), height=2, width=7).grid(row=4, column=3,
                                                                                       sticky=N + S + E + W)
    Button(root, text="/", command=lambda: get_operation("/"), height=2, width=7).grid(row=5, column=3,
                                                                                       sticky=N + S + E + W)

    # adding new operations
    Button(root, text="pi", command=lambda: get_operation("*3.14"), height=2, width=7).grid(row=2, column=4,
                                                                                            sticky=N + S + E + W)
    Button(root, text="%", command=lambda: get_operation("%"), height=2, width=7).grid(row=3, column=4,
                                                                                       sticky=N + S + E + W)
    Button(root, text="(", command=lambda: get_operation("("), height=2, width=7).grid(row=4, column=4,
                                                                                       sticky=N + S + E + W)
    Button(root, text="exp", command=lambda: get_operation("**"), height=2, width=7).grid(row=5, column=4,
                                                                                          sticky=N + S + E + W)

    Button(root, text="<-", command=lambda: undo(), height=2, width=7).grid(row=2, column=5, sticky=N + S + E + W)
    Button(root, text="x!", command=lambda: fact(), height=2, width=7).grid(row=3, column=5, sticky=N + S + E + W)
    Button(root, text=")", command=lambda: get_operation(")"), height=2, width=7).grid(row=4, column=5,
                                                                                       sticky=N + S + E + W)
    Button(root, text="^2", command=lambda: get_operation("**2"), height=2, width=7).grid(row=5, column=5,
                                                                                          sticky=N + S + E + W)
    Button(root, text="^2", command=lambda: get_operation("**2"), height=2, width=7).grid(row=5, column=5,
                                                                                          sticky=N + S + E + W)
    Button(root, text="=", command=lambda: calculate(), height=2, width=7).grid(columnspan=6, sticky=N + S + E + W)

    root.mainloop()

# pyttsx3
engine = pp.init()
voices = engine.getProperty('voices')
print(voices)
engine.setProperty('voice', voices[0].id)

rate = engine.getProperty('rate')
print(rate)
engine.setProperty('rate', 120)

def speak(word):
    engine.say(word)
    engine.runAndWait()

bot = ChatBot("My Bot")

# take query: it takes audio from the user and convert into string
def takeQuery():
    sr=s.Recognizer()
    sr.pause_threshold=1
    print("your bot is listening try to speak")
    with s.Microphone() as m:
        try:
            audio = sr.listen(m)
            query = sr.recognize_google(audio, language='eng-in')  # convert audio to string after listening from microphone as m
            print(query)
            textF.delete(0, END)
            textF.insert(0, query)  # insert your audio on text field too
            ask_from_bot()
        except Exception as e:
            print(e)
            print("not recognized")

def ask_from_bot():
    # for calc of adding
    calc_add_entry = textF.get()
    calc_add_split = calc_add_entry.split(">")[-1]

    # for wiki
    new_wiki_entry = textF.get()
    wiki_split = new_wiki_entry.split(">")[-1]

    # for calc of sub
    calc_sub_entry = textF.get()
    calc_sub_split = calc_sub_entry.split(">")[-1]
    calc_split_sub_first = calc_sub_split.split("-")[0]
    calc_split_sub_second = calc_sub_split.split("-")[-1]

    # for weather
    USER_AGENT = "Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/44.0.2403.157 Safari/537.36"
    LANGUAGE = "en-US,en;q=0.5"
    session = requests.Session()
    session.headers['User-Agent'] = USER_AGENT
    session.headers['Accept-Language'] = LANGUAGE
    session.headers['Content-Language'] = LANGUAGE
    new_wea_entry = textF.get()
    wea_split = new_wea_entry.split(">")[-1]

    # start from here
    InsEntry = textF.get()
    textF.configure(state=NORMAL)
    valIns = "You: " + InsEntry + "\n"
    msgs.insert(END, valIns)
    textF.delete(0, END)

    if InsEntry == "hello" or InsEntry == "hi" or InsEntry == "hey":
        Response = ["hello", "hii", "howdy"]
        RandRes = random.choice(Response)
        # to open the state of textarea to write
        textF.configure(state=NORMAL)
        msgs.insert(END, "Bot: " + str(RandRes))
        speak(RandRes)
        msgs.yview(END)

    elif InsEntry == "date" or InsEntry == "today date":
        tod_date = date.today()
        textF.configure(state=NORMAL)
        msgs.insert(END, "Bot: " + str(tod_date))
        speak(tod_date)
        msgs.yview(END)

    elif InsEntry == "time" or InsEntry == "current time":
        currtime = datetime.datetime.now().time()
        textF.configure(state=NORMAL)
        msgs.insert(END, "Bot: " + str(currtime))
        speak(currtime)
        msgs.yview(END)

    elif InsEntry == "how are you" or InsEntry == "how are you?":
        Response = ["I'm fine", "I'm good"]
        textF.configure(state=NORMAL)
        RandRes = random.choice(Response)
        msgs.insert(END, "Bot: "+ str(RandRes))
        speak(RandRes)
        msgs.yview(END)

    elif InsEntry == "good morning" or InsEntry == "morning":
        Response = ["morning", "goodie morn"]
        RandRes = random.choice(Response)
        textF.configure(state=NORMAL)
        msgs.insert(END, "Bot: "+ str(RandRes))
        speak(RandRes)
        msgs.yview(END)

    elif InsEntry == "what is your name" or InsEntry == "what is your name?":
        Response = "My name is bot."
        textF.configure(state=NORMAL)
        msgs.insert(END, "Bot: " + str(Response))
        speak(Response)
        msgs.yview(END)

    elif InsEntry == "open calculator" or InsEntry == "calculator":
        Res = "Ok, Follow these steps 1:Go to insert menu 2:Open Calculator"
        textF.configure(state=NORMAL)
        msgs.insert(END, "Bot: " + str(Res))
        speak(Res)
        msgs.yview(END)

    elif InsEntry == "wiki>" + wiki_split or InsEntry == "Wikipedia" + wiki_split:
        WikiSearch = wikipedia.summary(wiki_split, sentences=2)
        textF.configure(state=NORMAL)
        msgs.insert(END, "Bot: " + str(WikiSearch))
        speak(WikiSearch)
        msgs.yview(END)

    elif InsEntry == "calc.add>" + calc_add_split or InsEntry == "add" + calc_add_split:
        # print(calc_add_split)
        calc_split_add = []
        calc_split_add = calc_add_split.split("+")
        for i in range(0, len(calc_split_add)):
            calc_split_add[i] = int(calc_split_add[i])
        Sum = sum(calc_split_add)
        textF.configure(state=NORMAL)
        msgs.insert(END, "Bot: " + str(Sum))
        speak(Sum)
        msgs.yview(END)

    elif InsEntry == "calc.sub>"+calc_split_sub_first+"-"+calc_split_sub_second or InsEntry == "subtract"+calc_split_sub_first + "-"+calc_split_sub_second:
        sub1 = int(calc_split_sub_first)
        sub2 = int(calc_split_sub_second)
        subbed = sub1 - sub2
        textF.configure(state=NORMAL)
        # msgs.insert(END, CalcLabel)
        msgs.insert(END, "Bot: " + str(subbed))
        speak(subbed)
        msgs.yview(END)

    else:
        englishBot = ChatBot("Chatterbot", storage_adapter="chatterbot.storage.SQLStorageAdapter")
        trainer = ChatterBotCorpusTrainer(englishBot)
        trainer.train("chatterbot.corpus.english")  # train the chatter bot for english
        answer_from_bot = bot.get_response(InsEntry)
        Response = answer_from_bot
        textF.configure(state=NORMAL)
        msgs.insert(END, "Bot: " + str(Response))
        speak(Response)
        msgs.yview(END)
    # else:
    #     else_res = "No result found"
    #     textF.configure(state=NORMAL)
    #     msgs.insert(END, "Bot: " + str(else_res))
    #     speak(else_res)
    #     # textF.configure(state=DISABLED)
    #     msgs.yview(END)


if __name__ == '__main__':
    main=Tk()

# Create a main menu bar
menuBar = Menu(main)
main.config(menu=menuBar)

# Create the sub menu
# File menu
fileMenu = Menu(menuBar, tearoff=0)
fileMenu.add_command(label="New...")
fileMenu.add_command(label="Save...")
fileMenu.add_command(label="Exit...", command=quit)
menuBar.add_cascade(label="File", menu=fileMenu)
# Insert menu
insertMenu = Menu(menuBar, tearoff=0)
insertMenu.add_command(label="Calculator", command=calculator)
insertMenu.add_command(label="Calendar")
menuBar.add_cascade(label="Insert", menu=insertMenu)
# Help menu
helpMenu = Menu(menuBar, tearoff=0)
helpMenu.add_command(label="About")
menuBar.add_cascade(label="Help", menu=helpMenu)

main.geometry("500x620")

# Adding an image
main.title("My Chat Bot")
main.config(background='#F0E68C')
img = PhotoImage(file="bot1.png")
photoL = Label(main, image=img)
photoL.pack(pady=5)

# creating chat window with scrollbar
frame = Frame(main)
sc = Scrollbar(frame)
msgs = Listbox(frame, width=80, height=20, yscrollcommand=sc.set, bg='black', fg='white')
sc.pack(side=RIGHT, fill=Y)
msgs.pack(side=LEFT, fill=BOTH)
frame.pack()
frame.place(x=2, y=190)

# Creating text field
textF = Entry(main, font=("Arial", 18), bg='black', fg='white')
textF.pack(fill=X, pady=10)
textF.place(x=6, y=540, width=478)

# Create a button to send the message
btn = Button(main, text="AskFromBot", bg='grey', activebackground='light blue', font=('Arial', 12), command=ask_from_bot)
btn.pack()
btn.place(x=200, y=580)

# creating a function
def enter_function(event):
    btn.invoke()

# going to bind window with enter key...
main.bind('<Return>', enter_function)

def repeatL():
    while True:
        takeQuery()
t=threading.Thread(target=repeatL)
t.start()

main.mainloop()